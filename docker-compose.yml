x-app: &default-app
  build:
    context: "."
    target: "app"
    args:
      - "UID=${UID:-1000}"
      - "GID=${GID:-1000}"
      - "FLASK_DEBUG=${FLASK_DEBUG:-false}"
      - "NODE_ENV=${NODE_ENV:-production}"
  depends_on:
    - "postgres"
    - "redis"
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DOCKER_WEB_VOLUME:-./public:/app/public}"

services:
  nginx:
    image: nginx:1.19-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs
    depends_on:
      - web
      
  postgres:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_POSTGRES_CPUS:-0}"
          memory: "${DOCKER_POSTGRES_MEMORY:-0}"
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      # POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:15.0-bullseye"
    ports:
      - "${DOCKER_POSTGRES_PORT_FORWARD:-127.0.0.1:5432}:5432"
    profiles: ["postgres"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "postgres:/var/lib/postgresql/data"

  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    image: "redis:7.0.5-bullseye"
    profiles: ["redis"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "redis:/data"

  web:
    <<: *default-app
    image: mattairnow/monstagpt:web
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: ["web"]

  worker1:
    <<: *default-app
    image: mattairnow/monstagpt:worker
    command: celery -A "monstagpt.app.celery_app" worker -l "${CELERY_LOG_LEVEL:-INFO}" -Q queue1 --concurrency=4 --autoscale=10,3
    entrypoint: []
    env_file:
      - ".env"
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WORKER_CPUS:-0}"
          memory: "${DOCKER_WORKER_MEMORY:-0}"
    profiles: ["worker"]

  worker2:
    <<: *default-app
    image: mattairnow/monstagpt:worker2
    command: celery -A "monstagpt.app.celery_app" worker -l "${CELERY_LOG_LEVEL:-INFO}" -Q queue2 --concurrency=4 --autoscale=10,3
    entrypoint: []
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WORKER_CPUS:-0}"
          memory: "${DOCKER_WORKER_MEMORY:-0}"
    profiles: ["worker"]

  celerybeat:
      <<: *default-app
      image: mattairnow/monstagpt:worker
      command: celery -A "monstagpt.app.celery_app" beat -l "${CELERY_LOG_LEVEL:-INFO}"
      entrypoint: []
      deploy:
        resources:
          limits:
            cpus: "${DOCKER_WORKER_CPUS:-0}"
            memory: "${DOCKER_WORKER_MEMORY:-0}"
      profiles: ["worker"]

  mail:
    image: "sj26/mailcatcher:v0.8.2"
    ports:
      - "${DOCKER_MAIL_PORT_FORWARD:-127.0.0.1:1080}:1080"
    profiles: ["mail"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "0"

volumes:
  postgres: {}
  redis: {}
