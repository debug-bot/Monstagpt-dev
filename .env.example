# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set or it's being
# overwritten in development to make your life easier.

# Enable BuildKit by default:
#   https://docs.docker.com/develop/develop-images/build_enhancements
export DOCKER_BUILDKIT=1

# Rather than use the directory name, let's control the name of the project.
export COMPOSE_PROJECT_NAME=monstagpt

# In development we want all services to start but in production you don't
# need the asset watchers to run since assets get built into the image and you
# don't need the mail service since that's only for previewing emails in dev.
#
# You can even choose not to run postgres and redis in prod if you plan to use
# managed cloud services. Everything "just works", even optional depends_on!
#export COMPOSE_PROFILES=postgres,redis,web,worker
export COMPOSE_PROFILES=postgres,redis,assets,mail,web,worker

# If you're running native Linux and your uid:gid isn't 1000:1000 you can set
# these to match your values before you build your image. You can check what
# your uid:gid is by running `id` from your terminal.
#export UID=1000
#export GID=1000

# In development avoid writing out bytecode to __pycache__ directories.
#export PYTHONDONTWRITEBYTECODE=
export PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
export SECRET_KEY=insecure_key_for_dev

# Which log level should be used for Python's logger?
#LOG_LEVEL=DEBUG

# Which environment is running?
# For Flask, it should be: "true" or "false"
# For Node, it should be: "development" or "production"
#export FLASK_DEBUG=false
#export NODE_ENV=production
export FLASK_DEBUG=true
export NODE_ENV=development

# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#export SERVER_NAME=localhost:8000

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#export PORT=8000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#export WEB_CONCURRENCY=
export WEB_CONCURRENCY=1
#export PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#export WEB_RELOAD=false
export WEB_RELOAD=true

# Should the Webpack watcher use polling? Not all Docker hosts support inotify.
# If you find your assets aren't updating in development then set this to true.
#export WEBPACK_WATCHER_POLL=false

# What mail server should you connect to?
export MAIL_SERVER=mail
export MAIL_PORT=1025
export MAIL_USE_TLS=false
#export MAIL_USE_SSL=false
export MAIL_USERNAME=
export MAIL_PASSWORD=
#export MAIL_DEFAULT_SENDER=contact@local.host

# What username, email address and password should be used for the seed user?
export SEED_ADMIN_USERNAME=administrator
export SEED_ADMIN_EMAIL=dev@local.host
export SEED_ADMIN_PASSWORD=password

# Stripe keys.
export STRIPE_PUBLISHABLE_KEY=
export STRIPE_SECRET_KEY=

# Google Analytics.
#export ANALYTICS_GOOGLE_UA=

# You'll always want to set POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.

POSTGRES_USER=monstagpt
POSTGRES_PASSWORD=password
# When running this locally, you'll want to delete the above 2 lines and replace
# them with the 2 below, as EXPORT is required.

#export POSTGRES_USER=monstagpt
#export POSTGRES_PASSWORD=password


#export POSTGRES_DB=monstagpt
#export POSTGRES_HOST=postgres
#export POSTGRES_PORT=5432

# Connection string to Redis. This will be used to connect directly to Redis
# and for Celery. You can always split up your Redis servers later if needed.
#export REDIS_URL=redis://redis:6379/0

# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
#export CELERY_LOG_LEVEL=INFO

# Should Docker restart your containers if they go down in unexpected ways?
#export DOCKER_RESTART_POLICY=unless-stopped
export DOCKER_RESTART_POLICY=no

# What health check test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the health check do basically nothing.
#export DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
export DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#export DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
export DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In dev we want to volume mount everything
# so that we can develop our code without rebuilding our Docker images.
#export DOCKER_WEB_VOLUME=./public:/app/public
export DOCKER_WEB_VOLUME=.:/app

# It's a very good idea to not allow anyone from the outside world to connect
# to your database, even with a strong password. By default only localhost
# will be able to connect which is nice in development so you can connect using
# tools like pgAdmin or DBeaver.
#export DOCKER_POSTGRES_PORT_FORWARD=127.0.0.1:5432

# What ip:port should be published back to the Docker host for the mail web UI?
# This is typically only used in development but it's still a reasonable idea
# to consider restricting this to localhost if you're on a shared network.
#
# But at the same time if you want to connect on a device such as your phone
# then you'll want it open to everyone which is how it's set up below.
#export DOCKER_MAIL_PORT_FORWARD=127.0.0.1:1080
export DOCKER_MAIL_PORT_FORWARD=1080

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#export DOCKER_POSTGRES_CPUS=0
#export DOCKER_POSTGRES_MEMORY=0
#export DOCKER_REDIS_CPUS=0
#export DOCKER_REDIS_MEMORY=0
#export DOCKER_WEB_CPUS=0
#export DOCKER_WEB_MEMORY=0
#export DOCKER_WORKER_CPUS=0
#export DOCKER_WORKER_MEMORY=0



OPENAI_API_KEY=sk-apikeyhere
# to run locally delete the above and run the line below
export OPENAI_API_KEY = 'sk-apikeyhere'
# user credentials for basic auth
export  USERS = '{"admin": "secret"}'